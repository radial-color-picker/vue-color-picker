"use strict";(self.webpackChunk_radial_color_picker_vue_color_picker=self.webpackChunk_radial_color_picker_vue_color_picker||[]).push([[255],{389:(a,e,n)=>{n.r(e),n.d(e,{data:()=>s});const s={key:"v-0d9af0f8",path:"/api.html",title:"Config Reference",lang:"en-US",frontmatter:{sidebar:"auto"},excerpt:"",headers:[{level:2,title:"Props",slug:"props",children:[{level:3,title:"hue",slug:"hue",children:[]},{level:3,title:"saturation",slug:"saturation",children:[]},{level:3,title:"luminosity",slug:"luminosity",children:[]},{level:3,title:"alpha",slug:"alpha",children:[]},{level:3,title:"disabled",slug:"disabled",children:[]},{level:3,title:"step",slug:"step",children:[]},{level:3,title:"variant",slug:"variant",children:[]},{level:3,title:"initially-collapsed",slug:"initially-collapsed",children:[]},{level:3,title:"mouse-scroll",slug:"mouse-scroll",children:[]},{level:3,title:"aria-label",slug:"aria-label",children:[]},{level:3,title:"aria-roledescription",slug:"aria-roledescription",children:[]},{level:3,title:"aria-valuetext",slug:"aria-valuetext",children:[]},{level:3,title:"aria-label-color-well",slug:"aria-label-color-well",children:[]}]},{level:2,title:"Events",slug:"events",children:[{level:3,title:"input",slug:"input",children:[]},{level:3,title:"change",slug:"change",children:[]},{level:3,title:"select",slug:"select",children:[]}]}],filePathRelative:"api.md",git:{updatedTime:1627898601e3,contributors:[{name:"Rosen Kanev",email:"rkunev@gmail.com",commits:4}]}}},820:(a,e,n)=>{n.r(e),n.d(e,{default:()=>t});const s=(0,n(252).uE)('<h1 id="config-reference" tabindex="-1"><a class="header-anchor" href="#config-reference" aria-hidden="true">#</a> Config Reference</h1><h2 id="props" tabindex="-1"><a class="header-anchor" href="#props" aria-hidden="true">#</a> Props</h2><h3 id="hue" tabindex="-1"><a class="header-anchor" href="#hue" aria-hidden="true">#</a> hue</h3><ul><li>Type: <code>Number</code></li><li>Default: <code>0</code></li></ul><p>A number between <code>0-359</code>. Around 0º/360º are reds. 120º is where greens are and 240º are blues.</p><h3 id="saturation" tabindex="-1"><a class="header-anchor" href="#saturation" aria-hidden="true">#</a> saturation</h3><ul><li>Type: <code>Number</code></li><li>Default: <code>100</code></li><li><em>Optional</em></li></ul><p>A number between <code>0-100</code>. The larger the percentage, the more &quot;colorful&quot; this color is. 0% is completely desaturated (grayscale). 100% is fully saturated (full color).</p><h3 id="luminosity" tabindex="-1"><a class="header-anchor" href="#luminosity" aria-hidden="true">#</a> luminosity</h3><ul><li>Type: <code>Number</code></li><li>Default: <code>50</code></li><li><em>Optional</em></li></ul><p>A number between <code>0-100</code>. 0% is completely dark (black). 100% is completely light (white). 50% is average lightness.</p><h3 id="alpha" tabindex="-1"><a class="header-anchor" href="#alpha" aria-hidden="true">#</a> alpha</h3><ul><li>Type: <code>Number</code></li><li>Default: <code>1</code></li><li><em>Optional</em></li></ul><p>A number between <code>0-1</code>. Opacity/Transparency value. 0 is fully transparent. 1 is fully opaque. 0.5 is 50% transparent.</p><h3 id="disabled" tabindex="-1"><a class="header-anchor" href="#disabled" aria-hidden="true">#</a> disabled</h3><ul><li>Type: <code>Boolean</code></li><li>Default: <code>false</code></li><li><em>Optional</em></li></ul><p>A boolean to disable UI interactions. When <code>:disabled=&quot;true&quot;</code> is used the color picker is rendered with a dimmer color to indicate that the field is not available for use.</p><h3 id="step" tabindex="-1"><a class="header-anchor" href="#step" aria-hidden="true">#</a> step</h3><ul><li>Type: <code>Number</code></li><li>Default: <code>1</code></li><li><em>Optional</em></li></ul><p>Amount of degrees to rotate the picker with keyboard and/or wheel.</p><h3 id="variant" tabindex="-1"><a class="header-anchor" href="#variant" aria-hidden="true">#</a> variant</h3><ul><li>Type: <code>String</code></li><li>Default: <code>collapsible</code></li><li><em>Optional</em></li></ul><p>The mode of the picker. By default it will close/open when the color well is clicked. Use <code>variant=&quot;persistent&quot;</code> to prevent collapsing/closing and to keep the widget always open.</p><h3 id="initially-collapsed" tabindex="-1"><a class="header-anchor" href="#initially-collapsed" aria-hidden="true">#</a> initially-collapsed</h3><ul><li>Type: <code>Boolean</code></li><li>Default: <code>false</code></li><li><em>Optional</em></li></ul><p>Hides the palette initially. Using <code>variant=&quot;persistent&quot;</code> and <code>:initially-collapsed=&quot;true&quot;</code> at the same time is not supported.</p><h3 id="mouse-scroll" tabindex="-1"><a class="header-anchor" href="#mouse-scroll" aria-hidden="true">#</a> mouse-scroll</h3><ul><li>Type: <code>Boolean</code></li><li>Default: <code>false</code></li><li><em>Optional</em></li></ul><p>Use wheel (scroll) event to rotate. By default it&#39;s off to keep things simple. Add <code>:mouse-scroll=&quot;true&quot;</code> to allow the user to change the color by scrolling with mouse/trackpad.</p><div class="custom-container danger"><p class="custom-container-title">Here be dragons!</p><p>Keep in mind that by turning the <em>scroll to rotate</em> functionality on it may result in actually worse UX than without it (preventing page scroll while mouse pointer is over the picker). It&#39;s also another non-passive event listener that could potentially introduce jank on scroll.</p></div><h3 id="aria-label" tabindex="-1"><a class="header-anchor" href="#aria-label" aria-hidden="true">#</a> aria-label</h3><ul><li>Type: <code>String</code></li><li>Default: <code>color picker</code></li><li><em>Optional</em></li></ul><p>Defines a string value that labels the color picker. It provides the user with a recognizable name of the object.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>When a user interface is translated into multiple languages, ensure that <code>aria-label</code> values are translated.</p></div><h3 id="aria-roledescription" tabindex="-1"><a class="header-anchor" href="#aria-roledescription" aria-hidden="true">#</a> aria-roledescription</h3><ul><li>Type: <code>String</code></li><li>Default: <code>radial slider</code></li><li><em>Optional</em></li></ul><p>Defines a human-readable, author-localized description for the role of the color picker. Users of assistive technologies depend on the presentation of the role name, such as &quot;slider&quot; for an understanding of the purpose of the element and, if it is a widget, how to interact with it.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>When a user interface is translated into multiple languages, ensure that <code>aria-roledescription</code> values are translated.</p></div><h3 id="aria-valuetext" tabindex="-1"><a class="header-anchor" href="#aria-valuetext" aria-hidden="true">#</a> aria-valuetext</h3><ul><li>Type: <code>String</code></li><li>Default: <code>&#39;red&#39; | &#39;yellow&#39; | &#39;green&#39; | &#39;cyan&#39; | &#39;blue&#39; | &#39;magenta&#39;</code></li><li><em>Optional</em></li></ul><p>Defines the human readable text alternative of the value for a range widget. You can bring your own color-name map if you want (e.g. &quot;dark orange&quot;, &quot;amber&quot;, &quot;salmon&quot;)</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Make sure you update the <code>aria-valuetext</code> with any color change and as other aria attributes, when a user interface is translated into multiple languages, ensure that <code>aria-valuetext</code> values are translated.</p></div><h3 id="aria-label-color-well" tabindex="-1"><a class="header-anchor" href="#aria-label-color-well" aria-hidden="true">#</a> aria-label-color-well</h3><ul><li>Type: <code>String</code></li><li>Default: <code>color well</code></li><li><em>Optional</em></li></ul><p>Defines a string value that labels the color well (middle selector).</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>When a user interface is translated into multiple languages, ensure that <code>aria-label-color-well</code> values are translated.</p></div><h2 id="events" tabindex="-1"><a class="header-anchor" href="#events" aria-hidden="true">#</a> Events</h2><h3 id="input" tabindex="-1"><a class="header-anchor" href="#input" aria-hidden="true">#</a> input</h3><ul><li>Type: <code>Function</code></li><li>Params: <code>hue</code> (<code>Number</code>)</li></ul><p>Emitted every time the color updates. This could be a touchstart/mousedown event, when rotating the knob, keyboard shortcuts like <kbd>↑</kbd>, and scrolling if enabled. It&#39;s also the glue between the color picker component and the outside world. Use this to update the <code>hue</code> prop.</p><div class="language-vue ext-vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>color-picker</span> <span class="token attr-name">:hue</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hue<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>updateColor<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n        name<span class="token operator">:</span> <span class="token string">&#39;example-basic&#39;</span><span class="token punctuation">,</span>\n        <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> hue <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">return</span> <span class="token punctuation">{</span>\n                hue<span class="token punctuation">,</span>\n                <span class="token function">updateColor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    hue<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br></div></div><h3 id="change" tabindex="-1"><a class="header-anchor" href="#change" aria-hidden="true">#</a> change</h3><ul><li>Type: <code>Function</code></li><li>Params: <code>hue</code> (<code>Number</code>)</li><li><em>Optional</em></li></ul><p>Emitted every time the color changes, but unlike <code>@input</code> this is not emitted while rotating the knob. <code>@change</code> is a less noisy version of <code>@input</code> which is useful if you want to react to knob rotation stop for example or to use the <code>&lt;color-picker&gt;</code> as an uncontrolled component.</p><h3 id="select" tabindex="-1"><a class="header-anchor" href="#select" aria-hidden="true">#</a> select</h3><ul><li>Type: <code>Function</code></li><li>Params: <code>hue</code> (<code>Number</code>)</li><li><em>Optional</em></li></ul><p>Emitted when the user dismisses the color picker (i.e. interacting with the middle color well). Can be used as a secondary confirmation step from the user that this is the color value to be saved for example.</p><div class="language-vue ext-vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>color-picker</span> <span class="token attr-name">:hue</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hue<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onInput<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onSelect<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n        <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> hue <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">return</span> <span class="token punctuation">{</span>\n                hue<span class="token punctuation">,</span>\n                <span class="token function">onInput</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> hue<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token function">onSelect</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Color picker was dismissed.&#39;</span><span class="token punctuation">,</span> hue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br></div></div>',58);var t={render:function(a,e){return s}}}}]);